blogdown::new_site()
install.packages("blogdown")
install.packages("blogdown")
install.packages("blogdown")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::install_theme("gcushen/hugo-academic", theme_example=TRUE, update_config = TRUE)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::install_hugo()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::new_post_addin()
# make the filenames more consistent
filtered_names = selected %>%
group_by(artist) %>%
mutate(n = row_number()-1) %>%
mutate(newnames = paste0(artist, n))
install.packages("here")
install.packages("beepr")
knitr::opts_chunk$set(echo = TRUE, eval = FALSE, warning=FALSE, error=FALSE, message=FALSE)
# import packages
library(rvest)
library(stringr)
library(tidyverse)
library(purrr)
library(here)
library(beepr)
library(DT)
if(!require(rvest)) {
install.packages("rvest")
library(rvest)
}
vignette("selectorgadget")
# donwload homebrew if it doesn't already exist
if(!dir.exists("/usr/local/Homebrew")) {
system('ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"')
}
# download phantomjs using homebrew
if(!dir.exists("/usr/local/Cellar/phantomjs")) {
system("brew install phantomjs")
}
# write the javascript code to a new file, scrape.js
writeLines("var url = 'http://therapboard.com';
var page = new WebPage();
var fs = require('fs');
page.open(url, function (status) {
just_wait();
});
function just_wait() {
setTimeout(function() {
fs.write('1.html', page.content, 'w');
phantom.exit();
}, 2500);
}
", con = "scrape.js")
js_scrape <- function(url = "http://therapboard.com",
js_path = "scrape.js",
phantompath = "/usr/local/Cellar/phantomjs/2.1.1/bin/phantomjs"){
# this section will replace the url in scrape.js to whatever you want
lines <- readLines(js_path)
lines[1] <- paste0("var url ='", url ,"';")
writeLines(lines, js_path)
command = paste(phantompath, js_path, sep = " ")
system(command)
}
js_scrape()
# read the newly created html file
html <- read_html("1.html")
# write the javascript code to a new file, scrape.js
writeLines("var url = 'http://therapboard.com';
var page = new WebPage();
var fs = require('fs');
page.open(url, function (status) {
just_wait();
});
function just_wait() {
setTimeout(function() {
fs.write('1.html', page.content, 'w');
phantom.exit();
}, 2500);
}
", con = "scrape.js")
js_scrape <- function(url = "http://therapboard.com",
js_path = "scrape.js",
phantompath = "/usr/local/Cellar/phantomjs/2.1.1/bin/phantomjs"){
# this section will replace the url in scrape.js to whatever you want
lines <- readLines(js_path)
lines[1] <- paste0("var url ='", url ,"';")
writeLines(lines, js_path)
command = paste(phantompath, js_path, sep = " ")
system(command)
}
js_scrape()
# import packages
library(rvest)
library(stringr)
library(tidyverse)
library(purrr)
library(here)
library(beepr)
library(DT)
blogdown:::serve_site()
install.packages("blogdown")
install.packages("blogdown")
library(blogdown)
blogdown::serve_site()
blogdown::serve_site()
install.packages("blogdown")
install.packages("blogdown")
install.packages("blogdown")
install.packages("blogdown")
install.packages("here")
offset = seq(50,10000,100)
library(tidyverse)
library(httr)
library(dplyr)
###issue with Sri Lankan restaurants was that the number
###is so small that the offset isn't needed
client_id <- "cjes0snrWY5LhSumtIFZug"
client_secret <- "jR_1bpodltEK_vlRwPIXL_vm9fnXBrbN5dAJAvgYQUNq4q7qXrAV-_kEGI55v7Zq34m-4r3xD83SiKPdYQ8kUTqYaZJ5qeTiW_ldQpQa9szkI9JJQVwEB-7UBEqEXXYx"
res <- POST("https://api.yelp.com/oauth2/token",
body = list(grant_type = "client_credentials",
client_id = client_id,
client_secret = client_secret))
#token <- content(res)$access_token
yelp <- "https://api.yelp.com"
term <- "restaurant" ###setting this as "Sri Lankan" works
#category <- "srilankan"
location <- "Manhattan, NY"
#categories <- "srilankan"
limit <- 50
radius <- 500
offset = seq(50,10000,100)
urls = c()
for (i in offset){
url = modify_url(yelp, path = c("v3", "businesses", "search"),
query = list(term = term, location = location,
limit = limit,
#categories=categories,
radius = radius
,offset=0+i
))
urls = c(urls, url)}
urls[1]
urls[2]
offset = seq(50,10000,100)
offset = seq(0,10000,100)
offset = seq(0,10000,50)
urls = c()
for (i in offset){
url = modify_url(yelp, path = c("v3", "businesses", "search"),
query = list(term = term, location = location,
limit = limit,
#categories=categories,
radius = radius
,offset=0+i
))
urls = c(urls, url)}
urls[1]
urls[2]
library(tidyverse)
library(httr)
library(dplyr)
###issue with Sri Lankan restaurants was that the number
###is so small that the offset isn't needed
client_id <- "cjes0snrWY5LhSumtIFZug"
client_secret <- "jR_1bpodltEK_vlRwPIXL_vm9fnXBrbN5dAJAvgYQUNq4q7qXrAV-_kEGI55v7Zq34m-4r3xD83SiKPdYQ8kUTqYaZJ5qeTiW_ldQpQa9szkI9JJQVwEB-7UBEqEXXYx"
res <- POST("https://api.yelp.com/oauth2/token",
body = list(grant_type = "client_credentials",
client_id = client_id,
client_secret = client_secret))
#token <- content(res)$access_token
yelp <- "https://api.yelp.com"
term <- "restaurant" ###setting this as "Sri Lankan" works
#category <- "srilankan"
location <- "Manhattan, NY"
#categories <- "srilankan"
limit <- 50
radius <- 500
offset = seq(0,10000,50)
urls = c()
for (i in offset){
url = modify_url(yelp, path = c("v3", "businesses", "search"),
query = list(term = term, location = location,
limit = limit,
#categories=categories,
radius = radius
,offset=0+i
))
urls = c(urls, url)}
###TROUBLESHOOTING
new_results = c()
for (i in urls){
res <- GET(i, add_headers('Authorization' = paste("bearer", client_secret)))
results <- content(res)
new_results = c(new_results, results)
}
yelp_httr_parse <- function(x) {
parse_list <- list(id = x$id,
name = x$name,
rating = x$rating,
review_count = x$review_count,
latitude = x$coordinates$latitude,
longitude = x$coordinates$longitude,
address1 = x$location$address1,
city = x$location$city,
state = x$location$state,
distance = x$distance,
categories = x$categories)
parse_list <- lapply(parse_list, FUN = function(x) ifelse(is.null(x), "", x))
df <- data_frame(id=parse_list$id,
name=parse_list$name,
rating = parse_list$rating,
review_count = parse_list$review_count,
latitude=parse_list$latitude,
longitude = parse_list$longitude,
address1 = parse_list$address1,
city = parse_list$city,
state = parse_list$state,
distance= parse_list$distance,
categories_1 = parse_list$categories[[1]][[1]],
categories_2 = parse_list$categories[[1]][[2]]
)
df
}
results_list = c()
for (j in 1:length(new_results)){
result = lapply(new_results[j]$businesses, FUN = yelp_httr_parse)
results_list = c(results_list, result)
}
library(data.table)
library(plyr)
business_data <- unique(setDT(do.call("rbind.fill", results_list)))
View(business_data)
View(new_results)
offset = seq(0,1000,50)
urls = c()
for (i in offset){
url = modify_url(yelp, path = c("v3", "businesses", "search"),
query = list(term = term, location = location,
limit = limit,
#categories=categories,
radius = radius
,offset=0+i
))
urls = c(urls, url)}
###TROUBLESHOOTING
new_results = c()
for (i in urls){
res <- GET(i, add_headers('Authorization' = paste("bearer", client_secret)))
results <- content(res)
new_results = c(new_results, results)
}
yelp_httr_parse <- function(x) {
parse_list <- list(id = x$id,
name = x$name,
rating = x$rating,
review_count = x$review_count,
latitude = x$coordinates$latitude,
longitude = x$coordinates$longitude,
address1 = x$location$address1,
city = x$location$city,
state = x$location$state,
distance = x$distance,
categories = x$categories)
parse_list <- lapply(parse_list, FUN = function(x) ifelse(is.null(x), "", x))
df <- data_frame(id=parse_list$id,
name=parse_list$name,
rating = parse_list$rating,
review_count = parse_list$review_count,
latitude=parse_list$latitude,
longitude = parse_list$longitude,
address1 = parse_list$address1,
city = parse_list$city,
state = parse_list$state,
distance= parse_list$distance,
categories_1 = parse_list$categories[[1]][[1]],
categories_2 = parse_list$categories[[1]][[2]]
)
df
}
results_list = c()
for (j in 1:length(new_results)){
result = lapply(new_results[j]$businesses, FUN = yelp_httr_parse)
results_list = c(results_list, result)
}
library(data.table)
library(plyr)
business_data <- unique(setDT(do.call("rbind.fill", results_list)))
View(results_list)
View(new_results)
View(business_data)
yelp <- "https://api.yelp.com"
term <- "2 bros pizza" ###setting this as "Sri Lankan" works
#category <- "srilankan"
location <- "Manhattan, NY"
#categories <- "srilankan"
limit <- 50
radius <- 500
offset = seq(0,1000,50)
urls = c()
for (i in offset){
url = modify_url(yelp, path = c("v3", "businesses", "search"),
query = list(term = term, location = location,
limit = limit,
#categories=categories,
radius = radius
,offset=0+i
))
urls = c(urls, url)}
###TROUBLESHOOTING
new_results = c()
for (i in urls){
res <- GET(i, add_headers('Authorization' = paste("bearer", client_secret)))
results <- content(res)
new_results = c(new_results, results)
}
yelp_httr_parse <- function(x) {
parse_list <- list(id = x$id,
name = x$name,
rating = x$rating,
review_count = x$review_count,
latitude = x$coordinates$latitude,
longitude = x$coordinates$longitude,
address1 = x$location$address1,
city = x$location$city,
state = x$location$state,
distance = x$distance,
categories = x$categories)
parse_list <- lapply(parse_list, FUN = function(x) ifelse(is.null(x), "", x))
df <- data_frame(id=parse_list$id,
name=parse_list$name,
rating = parse_list$rating,
review_count = parse_list$review_count,
latitude=parse_list$latitude,
longitude = parse_list$longitude,
address1 = parse_list$address1,
city = parse_list$city,
state = parse_list$state,
distance= parse_list$distance,
categories_1 = parse_list$categories[[1]][[1]],
categories_2 = parse_list$categories[[1]][[2]]
)
df
}
results_list = c()
for (j in 1:length(new_results)){
result = lapply(new_results[j]$businesses, FUN = yelp_httr_parse)
results_list = c(results_list, result)
}
library(data.table)
library(plyr)
business_data <- unique(setDT(do.call("rbind.fill", results_list)))
View(business_data)
term <- "pizza" ###setting this as "Sri Lankan" works
#category <- "srilankan"
location <- "Manhattan, NY"
#categories <- "srilankan"
limit <- 50
radius <- 500
offset = seq(0,1000,50)
urls = c()
for (i in offset){
url = modify_url(yelp, path = c("v3", "businesses", "search"),
query = list(term = term, location = location,
limit = limit,
#categories=categories,
radius = radius
,offset=0+i
))
urls = c(urls, url)}
###TROUBLESHOOTING
new_results = c()
for (i in urls){
res <- GET(i, add_headers('Authorization' = paste("bearer", client_secret)))
results <- content(res)
new_results = c(new_results, results)
}
yelp_httr_parse <- function(x) {
parse_list <- list(id = x$id,
name = x$name,
rating = x$rating,
review_count = x$review_count,
latitude = x$coordinates$latitude,
longitude = x$coordinates$longitude,
address1 = x$location$address1,
city = x$location$city,
state = x$location$state,
distance = x$distance,
categories = x$categories)
parse_list <- lapply(parse_list, FUN = function(x) ifelse(is.null(x), "", x))
df <- data_frame(id=parse_list$id,
name=parse_list$name,
rating = parse_list$rating,
review_count = parse_list$review_count,
latitude=parse_list$latitude,
longitude = parse_list$longitude,
address1 = parse_list$address1,
city = parse_list$city,
state = parse_list$state,
distance= parse_list$distance,
categories_1 = parse_list$categories[[1]][[1]],
categories_2 = parse_list$categories[[1]][[2]]
)
df
}
results_list = c()
for (j in 1:length(new_results)){
result = lapply(new_results[j]$businesses, FUN = yelp_httr_parse)
results_list = c(results_list, result)
}
library(data.table)
library(plyr)
business_data <- unique(setDT(do.call("rbind.fill", results_list)))
View(business_data)
blogdown:::serve_site()
blogdown::serve_site()
blogdown::serve_site()
install.packages("rmarkdown")
